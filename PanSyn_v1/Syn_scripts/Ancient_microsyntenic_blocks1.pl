#!/usr/bin/perl
use Getopt::Long;
my %opts;
GetOptions(\%opts,"o=s","o2=s","s=s","orth=s","node=s","tre=s","h|help");
if (!( defined $opts{o} and defined $opts{o2} and defined $opts{s} and defined $opts{orth} and defined $opts{node} and defined $opts{tre})) {
		die "************************************************\n
	-o	Full path to the folder containing required data files
	-o2	Full path to the new folder containing output files
	-s	Full path to the [syn_scripts] file PanSyn provided
	-orth	Full path to the orthogroups.txt file generated by orthofinder
	-node	Node_names: space-separated names of the nodes for which you want to build ancestral OGs networks.
	-tre	Full path to the tree file
	-h|-help Print this help page
		*************************************************\n";
}
if (defined $opts{h} or defined $opts{help}) {
		die "************************************************\n
	-o	Full path to the folder containing required data files
	-o2	Full path to the new folder containing output files
	-s	Full path to the [syn_scripts] file PanSyn provided
	-orth	Full path to the orthogroups.txt file generated by orthofinder
	-node	Node_names: space-separated names of the nodes for which you want to build ancestral OGs networks.
	-tre	Full path to the tree file
	-h|-help Print this help page
		*************************************************\n";
}

chdir "$opts{o2}";
system "perl $opts{s}/orthoFinderToOrthogroup.pl $opts{orth} > $opts{node}.clus";
system "python $opts{s}/step1_make_dists.py -c $opts{node}.clus \$(ls $opts{o}/gffs/*chrom) -o $opts{node}-myresults";

system "python $opts{s}/step2_filter_pairs.py -d $opts{node}-myresults/$opts{node}-myresults.dist -s $opts{tre} -n $opts{node}";

system "mkdir -p $opts{node}-myresults/bynode/$opts{node}/m_3";
system "mv $opts{node}-myresults.m_3.$opts{node}.dist $opts{node}-myresults/bynode/$opts{node}/m_3";
system "python $opts{s}/step2.5_optimal_nmax.py $opts{node}-myresults/bynode -o $opts{node}-myresults/nmax_test --node_name $opts{node}";

